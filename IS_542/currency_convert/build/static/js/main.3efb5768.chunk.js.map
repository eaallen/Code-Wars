{"version":3,"sources":["Converter.js","App.js","reportWebVitals.js","index.js"],"names":["DOLLARS_PER_EURO","toDollar","euro","toEuro","dollar","tryConvert","amount","convertCallback","input","parseFloat","isNaN","toFixed","toString","CurrancyInput","props","currancy","value","name","onChange","change","Converter","handleChange","e","target","money","setState","dollar_amount","euro_amount","state","this","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iQAEMA,EAAmB,SAEzB,SAASC,EAASC,GACd,OAAOA,EAAOF,EAElB,SAASG,EAAOC,GACZ,OAAOA,EAASJ,EAGpB,SAASK,EAAWC,EAAQC,GACxB,IAAMC,EAAQC,WAAWH,GACzB,OAAII,MAAMF,GACC,GAGJD,EAAgBC,GAAOG,QAAQ,GAAGC,WAG7C,SAASC,EAAcC,GAEnB,OAAO,qCACH,mCAASA,EAAMC,SAAf,cACA,uBAAOC,MAAOF,EAAMR,OAAQW,KAAMH,EAAMG,KAAMC,SAAUJ,EAAMK,Y,IAIjDC,E,kDAEjB,WAAYN,GAAQ,IAAD,uBACf,cAAMA,IASVO,aAAe,SAACC,GACZ,IAAML,EAAOK,EAAEC,OAAON,KAChBO,EAAQF,EAAEC,OAAOP,MACvB,OAAQC,GACJ,IAAK,OACD,EAAKQ,SAAS,CACVC,cAAerB,EAAWmB,EAAOvB,GACjC0B,YAAaH,IAEjB,MACJ,QACI,EAAKC,SAAS,CACVC,cAAeF,EACfG,YAAatB,EAAWmB,EAAOrB,OAvB5B,OAGf,EAAKyB,MAAQ,CACTF,cAFgB,EAGhBC,YAAatB,EAHG,EAGqBF,GACrCY,SAAU,UANC,E,0CA6BnB,WACI,OAAO,iCACH,oDACA,cAACF,EAAD,CACIE,SAAS,SACTT,OAAQuB,KAAKD,MAAMF,cACnBP,OAAQU,KAAKR,aACbJ,KAAK,WACT,cAACJ,EAAD,CACIE,SAAS,OACTT,OAAQuB,KAAKD,MAAMD,YACnBR,OAAQU,KAAKR,aACbJ,KAAK,gB,GA3CkBa,IAAMC,WCjB9BC,MARf,WACE,OAEI,aADF,CACG,EAAD,KCMSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3efb5768.chunk.js","sourcesContent":["import React from 'react'\r\nimport './converter.css'\r\nconst DOLLARS_PER_EURO = 1.183369\r\n\r\nfunction toDollar(euro) {\r\n    return euro * DOLLARS_PER_EURO\r\n}\r\nfunction toEuro(dollar) {\r\n    return dollar / DOLLARS_PER_EURO\r\n}\r\n\r\nfunction tryConvert(amount, convertCallback) {\r\n    const input = parseFloat(amount)\r\n    if (isNaN(input)) {\r\n        return ''\r\n    }\r\n\r\n    return convertCallback(input).toFixed(2).toString()\r\n}\r\n\r\nfunction CurrancyInput(props) {\r\n    // const money = tryConvert(props.amount, props.currancy === 'Dollar'? toEuro:toDollar)\r\n    return <fieldset>\r\n        <legend>{props.currancy} amount:</legend>\r\n        <input value={props.amount} name={props.name} onChange={props.change} />\r\n    </fieldset>\r\n}\r\n\r\nexport default class Converter extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        const start_value = 1\r\n        this.state = {\r\n            dollar_amount: start_value,\r\n            euro_amount: tryConvert(start_value, toEuro),\r\n            currancy: 'Dollar'\r\n        }\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        const name = e.target.name\r\n        const money = e.target.value\r\n        switch (name) {\r\n            case 'euro':\r\n                this.setState({\r\n                    dollar_amount: tryConvert(money, toDollar),\r\n                    euro_amount: money\r\n                })\r\n                break\r\n            default:\r\n                this.setState({\r\n                    dollar_amount: money,\r\n                    euro_amount: tryConvert(money, toEuro),\r\n                })\r\n                break\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <main>\r\n            <h1>Currency Converter</h1>\r\n            <CurrancyInput\r\n                currancy='Dollar'\r\n                amount={this.state.dollar_amount}\r\n                change={this.handleChange}\r\n                name='dollar' />\r\n            <CurrancyInput\r\n                currancy='Euro'\r\n                amount={this.state.euro_amount}\r\n                change={this.handleChange}\r\n                name='euro' />\r\n\r\n        </main>\r\n    }\r\n}","// import './App.css';/\nimport Converter from './Converter';\n\nfunction App() {\n  return (\n    // <div className=\"App\">\n      <Converter/>\n    // </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}